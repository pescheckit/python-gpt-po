# .github/workflows/ci-cd.yml

name: Python Package CI

on:
  push:
    branches:
      - main
    tags:
      # Trigger on any tag (matches 0.0.1 style)
      - '*'
  pull_request:
    branches:
      - main
  release:
    types: [published] # If you create releases via GitHub UI based on tags

permissions:
  contents: read    # Needed for checkout
  packages: write   # Needed for GitHub Packages (Docker registry)

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          fetch-tags: true  # Explicitly fetch all tags
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install lint dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff flake8 pylint isort setuptools
          # Install runtime deps if linters need them (e.g., pylint requires imports)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Analysing the code with pylint
        run: |
          pylint python_gpt_po/
      - name: Check code style with flake8
        run: |
          flake8 python_gpt_po/
      - name: Check import order with isort
        run: |
          isort --check-only --diff .
      - name: Linting with Ruff
        run: |
          ruff check $(git ls-files '*.py')

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          fetch-tags: true  # Explicitly fetch all tags
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          # Install runtime dependencies AND test dependencies (like pytest)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
          # Install the package itself in editable mode for testing
          pip install -e .
      - name: Run tests
        run: |
          python -m pytest

  docker:
    # Builds Docker images for testing, does not push
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe
          fetch-tags: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers for Test Build
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-test # Separate cache path
          key: ${{ runner.os }}-buildx-test-${{ matrix.python-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-test-${{ matrix.python-version }}-

      - name: Get Version for Docker Build Args (Handles 0.0.1 style tags)
        id: get_version
        run: |
          # Ensure we have tags fetched completely
          git fetch --tags --force --prune --unshallow || echo "Fetching tags failed, proceeding..."
          # Use git describe. Outputs exact tag (0.0.1) or dev version (0.0.1-3-gddfce44)
          GIT_DESCRIBE=$(git describe --tags --always --dirty 2>/dev/null || echo "0.0.0")
          # No 'v' prefix removal needed if tags are like '0.0.1'
          VERSION=$GIT_DESCRIBE
          echo "Using version for Docker build arg: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker Image - Python ${{ matrix.python-version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true # Load image for local testing steps below
          # Use a distinct tag for the test build image
          tags: gpt-po-translator:py${{ matrix.python-version }}-test
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            VERSION=${{ steps.get_version.outputs.VERSION }}
          # Use distinct cache scope for test build
          cache-from: type=gha,scope=test-${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=test-${{ matrix.python-version }}

      - name: Test Docker Image - Help Text
        run: |
          # Use the -test tag for running tests
          docker run gpt-po-translator:py${{ matrix.python-version }}-test --version
          docker run gpt-po-translator:py${{ matrix.python-version }}-test --help
          echo "✅ Basic Docker image tests passed for Python ${{ matrix.python-version }}"

      - name: Test Docker Image - CLI Options
        run: |
          # Use the -test tag
          docker run gpt-po-translator:py${{ matrix.python-version }}-test --provider openai --help
          docker run gpt-po-translator:py${{ matrix.python-version }}-test --provider anthropic --help
          echo "✅ CLI option test passed for Python ${{ matrix.python-version }}"

      - name: Test Docker Image with Sample PO file
        run: |
          # Create test directory and dummy PO file
          mkdir -p test-po-files
          echo 'msgid "Hello"\nmsgstr ""' > test-po-files/test-sample.po
          # cp .github/workflows/test-sample.po test-po-files/ # Or use your existing file

          # Use the -test tag
          docker run \
            -v $(pwd)/test-po-files:/test \
            gpt-po-translator:py${{ matrix.python-version }}-test \
            --folder /test --help
          echo "✅ Docker volume mount test passed for Python ${{ matrix.python-version }}"


  deploy:
    needs: [test, docker] # Depends on successful tests and docker test-builds
    runs-on: ubuntu-latest
    # Trigger deployment only on tag pushes (any tag format)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    # environment: release # Uncomment if using GitHub environments for secrets/protection

    permissions:
      contents: read    # Needed for checkout
      packages: write   # Needed for GitHub Packages (Docker registry)

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        # Flag to indicate the primary version for single-run steps like PyPI deploy
        is_primary_py: [ ${{ matrix.python-version == '3.11' }} ] # Choose your primary Python version

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Crucial for setuptools_scm
          fetch-tags: true

      # === PyPI Deployment (runs only once for the primary Python version) ===
      - name: Set up Python for PyPI deploy
        if: matrix.is_primary_py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }} # Use the designated primary version

      - name: Install build tool for PyPI
        if: matrix.is_primary_py
        run: python -m pip install --upgrade pip build

      - name: Build PyPI package
        if: matrix.is_primary_py
        run: python -m build
        # setuptools_scm automatically determines version from git tag

      - name: Publish package to PyPI
        if: matrix.is_primary_py
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }} # Ensure this secret is set in repo settings

      # === Docker Deployment (runs for each Python version in the matrix) ===
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers for Deploy
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-deploy # Use separate cache path for deploy
          key: ${{ runner.os }}-deploy-buildx-${{ matrix.python-version }}-${{ github.ref }} # Use git ref for tag builds
          restore-keys: |
            ${{ runner.os }}-deploy-buildx-${{ matrix.python-version }}-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Built-in token

      - name: Extract metadata (tags, labels) for Docker (Handles 0.0.1 style tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Correct variable for owner/repo
          # Generate tags based on the Git tag (e.g., 0.0.1 from refs/tags/0.0.1)
          tags: |
            type=semver,pattern={{version}}-py${{ matrix.python-version }}
            type=semver,pattern={{major}}.{{minor}}-py${{ matrix.python-version }}
            type=semver,pattern={{major}}-py${{ matrix.python-version }}
            type=raw,value=latest-py${{ matrix.python-version }}
            type=raw,value=latest,enable=${{ matrix.is_primary_py }}
            # Also tag with the exact version number (e.g., 0.0.1-py3.11)
            type=match,pattern=(\d+\.\d+\.\d+.*),group=1,suffix=-py${{ matrix.python-version }}

      - name: Get Version for Docker Build Args (Handles 0.0.1 style tags)
        id: get_version_docker # Use different id from test job step
        run: |
          git fetch --tags --force --prune --unshallow || echo "Fetching tags failed, proceeding..."
          # Use git describe. Outputs exact tag (0.0.1) or dev version (0.0.1-3-gddfce44)
          GIT_DESCRIBE=$(git describe --tags --always --dirty 2>/dev/null || echo "0.0.0")
          # No 'v' prefix removal needed if tags are like '0.0.1'
          VERSION=$GIT_DESCRIBE
          echo "Using version for Docker build arg: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Push the image to GHCR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            VERSION=${{ steps.get_version_docker.outputs.VERSION }} # Use correct step id
          # The comment that likely caused the error was here - now removed
          cache-from: type=gha,scope=deploy-${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=deploy-${{ matrix.python-version }}
